{"version":3,"sources":["constants/contract.js","serviceWorker.js","index.js","App.js"],"names":["contract","waves","Boolean","window","location","hostname","match","ReactDOM","render","useState","address","setAddress","wished","setWellWishers","wavesList","setWavesList","message","setMessage","useSound","play","checkWalletConnected","a","async","ethereum","console","log","request","method","accounts","length","provider","ethers","providers","Web3Provider","signer","getSigner","waveportalContract","Contract","waveportal","abi","getTotalWaves","count","toNumber","getAllWaves","map","waveInfo","waver","timestamp","Date","toLocaleString","name","on","from","newWavesList","useEffect","Fragment","className","type","value","onChange","e","target","placeholder","onClick","waveMessage","wave","waveTxn","wait","disabled","alert","columns","title","field","data","options","showTitle","toolbar","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y4nBAIeA,G,OAJE,CACfC,MAAO,+C,oCCWWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCED,WACb,IAD4B,EAEGC,mBAAS,IAFZ,mBAEpBC,EAFoB,KAEXC,EAFW,OAGOF,mBAAS,GAHhB,mBAGpBG,EAHoB,KAGZC,EAHY,OAIQJ,mBAAS,IAJjB,mBAIpBK,EAJoB,KAITC,EAJS,OAKIN,mBAAS,IALb,mBAKpBO,EALoB,KAKXC,EALW,OAMXC,YALR,uBAKDC,EANoB,oBAQtBC,EAAuB,sCAAAC,EAAAC,OAAA,qDACNnB,OAAboB,EADmB,EACnBA,SADmB,uBAIzBC,QAAQC,IAAI,wBAJa,iCAO3BD,QAAQC,IAAI,oBAPe,oBAAAJ,EAAA,MAUFE,EAASG,QAAQ,CAAEC,OAAQ,kBAVzB,aAUnBC,EAVmB,QAYZC,OAAS,GAZG,wBAavBlB,EAAWiB,EAAS,IACdE,EAAW,IAAIC,IAAOC,UAAUC,aAAaV,GAC7CW,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SAASrC,EAASC,MAAOqC,EAAWC,IAAKL,GAhBxD,YAAAb,EAAA,MAkBHe,EAAmBI,iBAlBhB,QAkBjBC,EAlBiB,OAmBvB5B,EAAe4B,EAAMC,YAnBE,0DAuBzBlB,QAAQC,IAAR,MAvByB,0DAwEvBkB,EAAc,sCAAAtB,EAAAC,OAAA,qDACGnB,OAAboB,EADU,EACVA,SADU,UAGZA,EAHY,wBAIRO,EAAW,IAAIC,IAAOC,UAAUC,aAAaV,GAC7CW,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SAASrC,EAASC,MAAOqC,EAAWC,IAAKL,GANjE,WAAAb,EAAA,MAQMe,EAAmBO,eARzB,OAQR1C,EARQ,OASRa,EAAYb,EAAM2C,KAAI,SAACC,GAC3B,MAAO,CACLnC,QAASmC,EAASC,MAClBC,UAAW,IAAIC,KAA0B,IAArBH,EAASE,WAAkBE,iBAC/CjC,QAAS6B,EAASK,SAItBnC,EAAaD,GAEbsB,EAAmBe,GAAG,WAAW,SAACC,EAAML,EAAW/B,GAEjD,IAAMqC,EAAY,sBAAOvC,GAAP,CAAkB,CAClCJ,QAAS0C,EACTL,UAAW,IAAIC,KAAiB,IAAZD,GAAkBE,iBACtCjC,aAEFG,IACAJ,EAAasC,GACbxC,EAAewC,EAAaxB,WA5BhB,wBA+BdL,QAAQC,IAAI,0BA/BE,0DAkChBD,QAAQC,IAAR,MAlCgB,0DAmDpB,OAbA6B,qBAAU,WACQ,EAAAjC,EAAAC,OAAA,kEAAAD,EAAA,MACRD,KADQ,yBAAAC,EAAA,MAERsB,KAFQ,uCAMf,IAOD,kBAAC,IAAMY,SAAP,KAEE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UAAf,2BAGA,yBAAKA,UAAU,OAAf,yEAIE9C,GACA,yBAAK8C,UAAU,OAAf,uBACqB5C,GAAU,IAGjC,2BAAO6C,KAAK,OAAOC,MAAO1C,EAAS2C,SArBtB,SAACC,GACpB3C,EAAW2C,EAAEC,OAAOH,QAoB6CI,YAAY,mBAAmBN,UAAU,gBACpG,4BAAQA,UAAU,aAAaO,QA/F1B,sCAAA1C,EAAAC,OAAA,8DAEYnB,SAAboB,EAFC,EAEDA,UAFC,wBAKDO,EAAW,IAAIC,IAAOC,UAAUC,aAAaV,GAC7CW,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SAASrC,EAASC,MAAOqC,EAAWC,IAAKL,GAPxE,WAAAb,EAAA,MASDe,EAAmBI,iBATlB,cAUDwB,EAAchD,GAAW,MAVxB,YAAAK,EAAA,MAWee,EAAmB6B,KAAKD,IAXvC,eAWDE,EAXC,OAaPjD,EAAW,IAbJ,YAAAI,EAAA,MAcD6C,EAAQC,QAdP,gCAgBP3C,QAAQC,IAAI,uBAhBL,0DAqBTD,QAAQC,IAAI,sBACZD,QAAQC,IAAR,MAtBS,0DA+FyC2C,UAAW1D,GAAzD,gBACe,gDAGZA,GACD,4BAAQqD,QAvHI,8BAAA1C,EAAAC,OAAA,kEAEGnB,QAAboB,EAFU,EAEVA,WAEN8C,MAAM,qBAJU,WAAAhD,EAAA,MAOKE,EAASG,QAAQ,CACtCC,OAAQ,yBARQ,OAOZC,EAPY,OAWlBJ,QAAQC,IAAI,kBAAmBG,EAAS,IACxCjB,EAAWiB,EAAS,IAZF,kDAelBJ,QAAQC,IAAI,gCAAZ,MAfkB,0DAuHoB+B,UAAU,cAA1C,4BAOJ9C,GAAWI,EAAUe,OAAS,GAC9B,yBAAK2B,UAAU,QACb,kBAAC,IAAD,CACEc,QAAS,CACP,CAAEC,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,OAAQC,MAAO,cAE1BC,KAAM3D,EACN4D,QACE,CACEC,WAAW,EACXC,SAAS,SD/KT,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2896734c.chunk.js","sourcesContent":["const contract = {\n  waves: '0xc3d2585c1a008289Ff374BAFEd4F9bEBe96429F2'\n};\n\nexport default contract;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React,{  useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport contract from './constants/contract.js';\nimport waveportal from './utils/waveportal.json';\nimport MaterialTable from \"material-table\";\nimport useSound from \"use-sound\";\n\nexport default function App() {\n  const url = `bell_alert_tone.mp3`;\n  const [ address, setAddress] = useState('');\n  const [ wished, setWellWishers ] = useState(0);\n  const [ wavesList, setWavesList ] = useState([]);\n  const [ message, setMessage ] = useState('');\n  const [ play ] = useSound(url);\n\n  const checkWalletConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log('Wallet Not Connected');\n      return;\n    }\n    console.log('Wallet Connected');\n\n    try {\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length > 0) {\n        setAddress(accounts[0]);\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const waveportalContract = new ethers.Contract(contract.waves, waveportal.abi, signer);\n\n        const count = await waveportalContract.getTotalWaves();\n        setWellWishers(count.toNumber());\n      }\n    \n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert('Download Metamask');\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n\n      console.log('Current Account', accounts[0]);\n      setAddress(accounts[0]);\n\n    } catch (e) {\n      console.log('Error while connecting wallet', e);\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const waveportalContract = new ethers.Contract(contract.waves, waveportal.abi, signer);\n\n        await waveportalContract.getTotalWaves();\n        const waveMessage = message || 'N.A';\n        const waveTxn = await waveportalContract.wave(waveMessage);\n\n        setMessage('');\n        await waveTxn.wait();\n      } else {\n        console.log('No wallet connected')\n      }\n\n\n    } catch (e) {\n      console.log('Error while waving');\n      console.log(e);\n    }\n  }\n\n  const getAllWaves = async () => {\n    const { ethereum } = window;\n    try {\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const waveportalContract = new ethers.Contract(contract.waves, waveportal.abi, signer);\n  \n        const waves = await waveportalContract.getAllWaves();\n        const wavesList = waves.map((waveInfo) => {\n          return {\n            address: waveInfo.waver,\n            timestamp: new Date(waveInfo.timestamp * 1000).toLocaleString(),\n            message: waveInfo.name\n          }\n        });\n  \n        setWavesList(wavesList);\n\n        waveportalContract.on('NewWave', (from, timestamp, message) => {\n\n          const newWavesList = [...wavesList, {\n            address: from,\n            timestamp: new Date(timestamp * 1000).toLocaleString(),\n            message\n          }];\n          play();\n          setWavesList(newWavesList);\n          setWellWishers(newWavesList.length);\n        });\n      } else {\n        console.log('Metamask not connected');\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  useEffect(() => {\n    const asyncFn = async () => {\n      await checkWalletConnected();\n      await getAllWaves();\n    }\n\n    asyncFn();\n  }, []);\n\n  const handleChange = (e) => {\n    setMessage(e.target.value);\n  }\n  \n  return (\n    <React.Fragment>\n\n      <div className=\"mainContainer\">\n        <div className=\"dataContainer\">\n          <div className=\"header\">\n          👋 Hey there!\n          </div>\n          <div className=\"bio\">\n          I am Charul and this is my first project in Blockchain. Wish me luck!\n          </div>\n          {\n            address &&\n            <div className=\"bio\">\n            No of well wishers: {wished || ''} \n            </div>\n          }\n          <input type='text' value={message} onChange={handleChange} placeholder='Type the message' className=\"input-field\"/>\n          <button className=\"waveButton\" onClick={wave} disabled={!address}>\n            Wish me luck <span>👍</span>\n          </button>\n          {\n            !address && \n            <button onClick={connectWallet} className=\"waveButton\">\n              Connect with MetaMask!\n            </button>\n          }\n        </div>\n      </div>\n      {\n        address && wavesList.length > 0 &&\n        <div className='list'>\n          <MaterialTable\n            columns={[\n              { title: 'Address', field: 'address' },\n              { title: 'Message', field: 'message' },\n              { title: 'Time', field: 'timestamp' }\n            ]}\n            data={wavesList}\n            options={\n              {\n                showTitle: false,\n                toolbar: false\n              }\n            }\n          />\n        </div> \n      }\n    </React.Fragment>\n  );\n}\n"],"sourceRoot":""}