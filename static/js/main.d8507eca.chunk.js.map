{"version":3,"sources":["constants/contract.js","serviceWorker.js","index.js","App.js"],"names":["contract","waves","Boolean","window","location","hostname","match","ReactDOM","render","useState","address","setAddress","wished","setWellWishers","checkWalletConnected","a","async","ethereum","console","log","request","method","accounts","length","provider","ethers","providers","Web3Provider","signer","getSigner","waveportalContract","Contract","waveportal","abi","getTotalWaves","count","toNumber","useEffect","className","onClick","wave","waveTxn","wait","disabled","alert","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"q0TAIeA,G,MAJE,CACfC,MAAO,+C,QCWWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCAD,WAAgB,IAAD,EACGC,mBAAS,IADZ,mBACpBC,EADoB,KACXC,EADW,OAEOF,mBAAS,GAFhB,mBAEpBG,EAFoB,KAEZC,EAFY,KAItBC,EAAuB,sCAAAC,EAAAC,OAAA,qDACNb,OAAbc,EADmB,EACnBA,SADmB,uBAIzBC,QAAQC,IAAI,wBAJa,iCAO3BD,QAAQC,IAAI,oBAPe,oBAAAJ,EAAA,MAUFE,EAASG,QAAQ,CAAEC,OAAQ,kBAVzB,aAUnBC,EAVmB,QAYZC,OAAS,GAZG,wBAavBZ,EAAWW,EAAS,IACdE,EAAW,IAAIC,IAAOC,UAAUC,aAAaV,GAC7CW,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SAAS/B,EAASC,MAAO+B,EAAWC,IAAKL,GAhBxD,YAAAb,EAAA,MAkBHe,EAAmBI,iBAlBhB,QAkBjBC,EAlBiB,OAmBvBtB,EAAesB,EAAMC,YAnBE,0DAuBzBlB,QAAQC,IAAR,MAvByB,0DAgF7B,OArDAkB,qBAAU,oBAAAtB,EAAAC,OAAA,gDACRF,IADQ,uCAEP,IAoDD,yBAAKwB,UAAU,iBAEb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UAAf,2BAGA,yBAAKA,UAAU,OAAf,yEAIE5B,GACA,yBAAK4B,UAAU,OAAf,uBACqB1B,GAAU,IAIjC,4BAAQ0B,UAAU,aAAaC,QA/CxB,sCAAAxB,EAAAC,OAAA,8DAEYb,SAAbc,EAFC,EAEDA,UAFC,wBAKDO,EAAW,IAAIC,IAAOC,UAAUC,aAAaV,GAC7CW,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SAAS/B,EAASC,MAAO+B,EAAWC,IAAKL,GAPxE,WAAAb,EAAA,MASDe,EAAmBI,iBATlB,0BAAAnB,EAAA,MAWee,EAAmBU,QAXlC,eAWDC,EAXC,mBAAA1B,EAAA,MAYD0B,EAAQC,QAZP,2BAAA3B,EAAA,MAcae,EAAmBI,iBAdhC,QAcDC,EAdC,OAgBPjB,QAAQC,IAAIgB,EAAMC,YAClBvB,EAAesB,EAAMC,YAjBd,wBAoBPlB,QAAQC,IAAI,uBApBL,0DAyBTD,QAAQC,IAAI,sBACZD,QAAQC,IAAR,MA1BS,0DA+CuCwB,UAAWjC,GAAzD,8BAIGA,GACD,4BAAQ6B,QAvEM,8BAAAxB,EAAAC,OAAA,kEAEGb,QAAbc,EAFU,EAEVA,WAEN2B,MAAM,qBAJU,WAAA7B,EAAA,MAOKE,EAASG,QAAQ,CACtCC,OAAQ,yBARQ,OAOZC,EAPY,OAWlBJ,QAAQC,IAAI,kBAAmBG,EAAS,IACxCX,EAAWW,EAAS,IAZF,kDAelBJ,QAAQC,IAAI,gCAAZ,MAfkB,0DAuEkBmB,UAAU,cAA1C,8BD1GM,MAASO,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d8507eca.chunk.js","sourcesContent":["const contract = {\n  waves: '0x6E0266174D764b49761Deb19621D2a3A7696d310'\n};\n\nexport default contract;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React,{  useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport contract from './constants/contract.js';\nimport waveportal from './utils/waveportal.json'\n\nexport default function App() {\n  const [ address, setAddress] = useState('');\n  const [ wished, setWellWishers ] = useState(0);\n\n  const checkWalletConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log('Wallet Not Connected');\n      return;\n    }\n    console.log('Wallet Connected');\n\n    try {\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length > 0) {\n        setAddress(accounts[0]);\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const waveportalContract = new ethers.Contract(contract.waves, waveportal.abi, signer);\n\n        const count = await waveportalContract.getTotalWaves();\n        setWellWishers(count.toNumber());\n      }\n    \n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  useEffect(async () => {\n    checkWalletConnected();\n  }, []);\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert('Download Metamask');\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n\n      console.log('Current Account', accounts[0]);\n      setAddress(accounts[0]);\n\n    } catch (e) {\n      console.log('Error while connecting wallet', e);\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const waveportalContract = new ethers.Contract(contract.waves, waveportal.abi, signer);\n\n        await waveportalContract.getTotalWaves();\n\n        const waveTxn = await waveportalContract.wave();\n        await waveTxn.wait();\n\n        const count = await waveportalContract.getTotalWaves();\n\n        console.log(count.toNumber());\n        setWellWishers(count.toNumber());\n        \n      } else {\n        console.log('No wallet connected')\n      }\n\n\n    } catch (e) {\n      console.log('Error while waving');\n      console.log(e);\n    }\n  }\n  \n  return (\n    <div className=\"mainContainer\">\n\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n        👋 Hey there!\n        </div>\n        <div className=\"bio\">\n        I am Charul and this is my first project in Blockchain. Wish me luck!\n        </div>\n        {\n          address &&\n          <div className=\"bio\">\n          No of well wishers: {wished || ''} \n          </div>\n        }\n\n        <button className=\"waveButton\" onClick={wave} disabled={!address}>\n          Wish me luck 👍\n        </button>\n        {\n          !address && \n          <button onClick={connectWallet} className=\"waveButton\">\n            Connect with MetaMask!\n          </button>\n        }\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}